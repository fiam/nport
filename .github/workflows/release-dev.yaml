on:
  workflow_dispatch:
name: Release NP client
jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.name.outputs.release_name }}
      is_prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
      windows_amd64_filename: np-windows-${{ steps.name.outputs.release_name }}.zip
      linux_amd64_filename: np-linux-amd64-${{ steps.name.outputs.release_name }}.tar.gz
      macos_filename: np-macOS-${{ steps.name.outputs.release_name }}.zip
    steps:
      - uses: actions/checkout@v3

      - id: name
        name: Find release name
        run: echo "release_name=$((git describe --exact-match --tags HEAD || git rev-parse --short HEAD) 2> /dev/null)" >> "$GITHUB_OUTPUT"
      - id: prerelease
        name: Determine wheter we're building a prerelease
        run: echo "is_prerelease=$((git -q describe --exact-match --tags HEAD && echo true) 2> /dev/null || echo false)" >> "$GITHUB_OUTPUT"

  build-linux-windows:
    runs-on: ubuntu-latest
    needs: configure
    env:
      WINDOWS_AMD64_FILENAME: ${{ needs.configure.outputs.windows_amd64_filename }}
      LINUX_AMD64_FILENAME: ${{ needs.configure.outputs.linux_amd64_filename }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install cross
        run: cargo install cross --force --git https://github.com/cross-rs/cross

      - name: Create dist directory
        run: mkdir -p dist

      - name: Build windows/amd64
        run: cross build -p np --release --target x86_64-pc-windows-gnu

      - name: Create windows/amd64 zip
        run: mv target/x86_64-pc-windows-gnu/release/np.exe dist && cd dist && zip -9 ${{ env.WINDOWS_AMD64_FILENAME }} np.exe

      - name: Upload windows/amd64 artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WINDOWS_AMD64_FILENAME }}
          path: dist/${{ env.WINDOWS_AMD64_FILENAME }}

      - name: Build linux/amd64
        run: cross build -p np --release --target x86_64-unknown-linux-gnu

      - name: Create linux/amd64 tar.gz
        run: mv target/x86_64-unknown-linux-gnu/release/np dist && cd dist && tar -czvf ${{ env.LINUX_AMD64_FILENAME }} np

      - name: Upload linux/amd64 artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.LINUX_AMD64_FILENAME }}
          path: dist/${{ env.LINUX_AMD64_FILENAME }}

  build-macos:
    runs-on: macos-latest
    needs: configure
    env:
      MACOS_FILENAME: ${{ needs.configure.outputs.macos_filename }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Add toolchains
        run: rustup target add x86_64-apple-darwin && rustup target add aarch64-apple-darwin

      - name: Build amd64
        run: cargo build -p np --release --target=x86_64-apple-darwin

      - name: Build aarch64
        run: cargo build -p np --release --target=aarch64-apple-darwin

      - name: Create dist directory
        run: mkdir -p dist

      - name: Build fat binary
        run: lipo -create -output dist/np target/aarch64-apple-darwin/release/np target/x86_64-apple-darwin/release/np

      - name: Create zip
        run: cd dist && zip -9 ${{ env.MACOS_FILENAME }} np

      - name: Upload macos artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MACOS_FILENAME }}
          path: dist/${{ env.MACOS_FILENAME }}

  create-release:
    runs-on: ubuntu-latest
    needs: [configure, build-linux-windows, build-macos]
    env:
      WINDOWS_AMD64_FILENAME: ${{ needs.configure.outputs.windows_amd64_filename }}
      LINUX_AMD64_FILENAME: ${{ needs.configure.outputs.linux_amd64_filename }}
      MACOS_FILENAME: ${{ needs.configure.outputs.macos_filename }}
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.configure.outputs.release_name }}
          prerelease: ${{ needs.configure.outputs.is_prerelease }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
            ${{ env.LINUX_AMD64_FILENAME }}
            ${{ env.WINDOWS_AMD64_FILENAME }}
            ${{ env.MACOS_FILENAME }}
